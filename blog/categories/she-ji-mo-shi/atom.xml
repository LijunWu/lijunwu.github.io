<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category:设计模式 | Amy's Blog]]></title>
  <link href="http://lijunwu.github.io/blog/categories/she-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://lijunwu.github.io/"/>
  <updated>2017-02-14T19:49:37+08:00</updated>
  <id>http://lijunwu.github.io/</id>
  <author>
    <name><![CDATA[吴丽君]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式-抽象工厂]]></title>
    <link href="http://lijunwu.github.io/blog/2015/01/24/she-ji-mo-shi-chou-xiang-gong-han/"/>
    <updated>2015-01-24T19:15:28+08:00</updated>
    <id>http://lijunwu.github.io/blog/2015/01/24/she-ji-mo-shi-chou-xiang-gong-han</id>
    <content type="html"><![CDATA[<h2>什么是抽象工厂</h2>

<p style="color:#666666;font-weight:bold;font-size:18px;line-height: 130%;text-indent:20pt">
提供一个创建一系列相关或相互依赖对象的接口，而无需指定具体的类。它涉及多个类型的对象的创建，一系列相关类的好的模式，应该作为一种抽象，不为客户所见。抽象工厂模式可以提供这种抽象，从而不暴露创建过程中任何不必要的细节或所创建的对象的确切类型。
</p>


<div style="text-align:center">
<img src = "http://lijunwu.github.io/images/抽象工厂类图.png" style = "border:1px dashed #930f83;align:center"/>
</div>


<p><p style = "text-indent:20pt;">对于用户来说，他只知道AbstractFactory和AbstractProducts.至于这些工厂和产品的具体的结构和实现细节对用户来说都像一个放在工厂类里面的黑盒一样。每种产品甚至都不知道是哪个类负责创建他们。只有ConcreteFactory知道如何创建产品以及创建什么样的产品给用户。</p>

<h2>抽象工厂VS.工厂方法</h2>

<p><p style = "text-indent:20pt;">抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构。在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说，工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类。</p>

<p><p style = "text-indent:20pt;">在抽象工厂模式中，有一个产品族的概念：所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族。抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法提供的一系列产品称为一个等级结构。我们依然拿生产汽车的例子来说明他们之间的区别。
<div style="text-align:center">
<img src = "http://lijunwu.github.io/images/抽象工厂VS.工厂方法.png" style = "border:1px dashed #930f83;align:center"/>
</div></p>

<h2>使用抽象工厂的效果</h2>

<p><ol>
<li> 它分离了具体的类</li>
一个工厂封装了创建产品对象的责任和过程，它将客户与类的实现分离。客户通过抽象接口操作实例。产品的类名也在具体工厂的实现中被分离，他们不出现在客户代码中。
<li>易于交换产品系列</li>
改变具体的工厂即可以使用不同的产品配置，因为一个抽象工厂创建了一个完整的产品系列，所以整个产品系列会立刻改变。
<li>有利于产品一致性</li>
当一个系列中的产品被设计成一起工作时，一个应用一次只能使用同一个系列中的对象。
<li>难以支持新种类的产品</li>
抽象工厂接口确定了可以被创建的产品集合。要支持新种类的产品，就要扩展该工厂接口，这将涉及到AbstractFactory类及其所有子类的改变。
</ol></p>

<h2>抽象工厂的实现</h2>

<h3>可能会用到的一些有用的技术</h3>

<p><ol>
<li>将工厂作为单例</li>
一个应用中一般每个产品系列只需要一个ConcreteFactory的实例，因为工厂通常最好实现为一个Singleton。
<li>创建产品</li>
抽象工厂仅声明一个创建产品的接口，正在创建产品的是由ConcreteCreator子类实现的。最通常的一个方法是为每个产品定义一个工厂方法（工厂方法）,一个具体的工厂将为每个产品重新定义该工厂方法以指定产品。虽然这样的实现很简单，但它却要求每个产品系列都要有一个新的具体的工厂子类，即使这些产品系列的差别很小。
如果有多个可能的产品系列，具体工厂也可以使用Prototype模式来实现。具体工厂使用产品系列中每一个产品的原型实例来初始化。且它通过复制它的原型来创建新的产品。在基于原型的方法中，使得不是每个新的产品系列都需要一个新的具体工厂类。
<li>定义可扩展的工厂</li>
抽象工厂通常为每一种它可以生产的产品定义一个操作。产品的种类被编码在操作行构中。增加一种新的产品要求改变抽象工厂的接口以及所有与它相关的类。一个更加灵活但不太安全的设计是给创建对象的操作增加一个参数。这个参数可以标识这个被创建的产品的种类。它可以是一个类标识符，一个整数、一个字符串等。
</ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-工厂方法]]></title>
    <link href="http://lijunwu.github.io/blog/2015/01/06/she-ji-mo-shi-gong-han-fang-fa/"/>
    <updated>2015-01-06T13:37:53+08:00</updated>
    <id>http://lijunwu.github.io/blog/2015/01/06/she-ji-mo-shi-gong-han-fang-fa</id>
    <content type="html"><![CDATA[<h2>什么是工厂方法</h2>

<p style="color:#666666;font-weight:bold;font-size:18px;line-height: 130%;text-indent:20pt">定义创建对象的接口，让子类决定实例化哪一个对象。工厂方法使得一个类的初始化延迟到其子类。工厂方法也被称为虚构造器。</p>


<div style="text-align:center">
<img src = "http://lijunwu.github.io/images/工厂方法类图.png" style = "border:1px dashed #930f83;align:center"/>
</div>


<p><p style = "text-indent:20pt;">抽象的Product定义了工厂方法创建的对象接口。ConcreteProduct实现了Product定义的接口。Creator定义了一个工厂方法，这个方法会返回一个Product对象，当然也可以为这个工厂方法提供一个默认的实现，返回一个默认的ConcreteProduct对象。Creator的其他方法可以调用这个工厂方法创建Product对象。ConcreteCreator是Creator的子类，它重载了工厂方法，并返回一个ConcreteProduct的实例。</p>

<h2>何时使用工厂方法</h2>

<p><p>当遇到以下情形时，可以考虑使用工厂模式
<ol>
<li>编译时无法准确预期想要创建的对象的类；
<li>类想让其子类决定在运行时创建什么；
<li>类有若干辅助类为其子类，而你想将返回哪个类这一信息局部化
</ol></p>

<h4>Cocoa中的例子</h4>

<p><p style = "text-indent:20pt;">Cocoa中使用这一架构的例子有NSNumber。尽管可以使用常见的alloc init两步法创建NSNumber的实例，但这基本上没做什么，除非你使用预先定义的类工厂方法来创建一个有意义的实例。例如，
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithBool</span><span class="p">:</span><span class="nb">YES</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>这个方法会得到一个NSCFBoolean的实例，这个实例包含传给类工厂方法的布尔值。</p>

<h2>使用工厂方法的效果</h2>

<p><p style="text-indent:20pt">工厂方法不再将与特定应用有关的类绑定到你的代码中，代码仅处理Product接口；因此它可以与用户定义的任何ConcreteProduct类一起使用。
<p style="text-indent:20pt">工厂方法的一个潜在缺点在于用户仅仅为了创建一个特定的ConcreteProduct对象，就不得不创建Creator的子类。当创建Creator子类不必需时，客户现在必然要处理类演化的其他方面；但是当客户无论如何必须创建Creator的子类时，创建子类也是可行的。</p>

<h4>下面是Factory Method模式的另外两种效果</h4>

<p><ol>
<li>为子类提供挂钩（hook）</li>
用工厂方法在一个类的内部创建对象通常比直接创建对象更灵活。Factory Method给子类一个挂钩以提供对象的扩展版本。
Creator可以定义工厂方法的合理的缺省实现。
<li>连接平行的类层次</li>
当一个类将它的职责委托给一个独立的类的时候，就产生了平行类层次。
工厂方法将哪些类应一同工作的信息局部化了。
</ol></p>

<h2>工厂方法的实现</h2>

<p><p style = "text-indent:20pt;">当应用Factory Method模式时，应考虑一下问题
<ol>
    <li>主要有两种不同的情况
        <ul>
            <li>Creator是一个抽象类，并且不提供它所声明的工厂方法的实现。这种情况需要子类来定义实现。它避免了不得不实例化不可预见类的问题
            <li>Creator是一个具体的类，而且为工厂方法提供一个缺省的实现。它所遵循的准则是：用一个独立的操作创建对象，这样子类才能重新定义他们的创建方式。
        </ul>
    </li>
    <li>参数化工厂方法</li>
    工厂方法采用一个标识要背创建的对象种类的参数。
</ol></p>

<h2>典型应用[来自网络]</h2>

<p><p style = "text-indent:20pt;">要说明工厂模式的优点，可能没有比组装汽车更合适的例子了。场景是这样的：汽车由发动机、轮、底盘组成，现在需要组装一辆车交给调用者。假如不使用工厂模式，代码如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">Engine</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">getEngine</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Engine</span> <span class="o">*</span><span class="n">engine</span> <span class="o">=</span> <span class="p">[</span><span class="n">Engine</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">这是汽车的发动机</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">engine</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Underpan</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">getUnderpan</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Underpan</span> <span class="o">*</span><span class="n">underpan</span> <span class="o">=</span> <span class="p">[</span><span class="n">Underpan</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">这是汽车的底盘</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">underpan</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Wheel</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="n">getWheel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Wheel</span> <span class="o">*</span><span class="n">wheel</span> <span class="o">=</span> <span class="p">[</span><span class="n">Wheel</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">这是汽车的轮胎</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">wheel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Car</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nl">makeCarWithEngine</span><span class="p">:(</span><span class="n">Engine</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">engine</span> <span class="nl">underpan</span><span class="p">:(</span><span class="n">Underpan</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">underpan</span> <span class="nl">wheel</span><span class="p">:(</span><span class="n">Wheel</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">wheel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Car</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">car</span> <span class="o">=</span> <span class="p">[</span><span class="n">Car</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">car</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Client</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Car</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">mainMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Engine</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">engine</span> <span class="o">=</span> <span class="p">[</span><span class="n">Engine</span> <span class="n">getEngine</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Underpan</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">underpan</span> <span class="o">=</span> <span class="p">[</span><span class="n">Underpan</span> <span class="n">getUnderpan</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Wheel</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">wheel</span> <span class="o">=</span> <span class="p">[</span><span class="n">Wheel</span> <span class="n">getWheel</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Car</span> <span class="o">*</span><span class="n">car</span> <span class="o">=</span> <span class="p">[</span><span class="n">Car</span> <span class="nl">makeCarWithEngine</span><span class="p">:</span><span class="n">engine</span> <span class="nl">underpan</span><span class="p">:</span><span class="n">underpan</span> <span class="nl">wheel</span><span class="p">:</span><span class="n">wheel</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">car</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>


<p><p style="text-indent:20pt">可以看到，调用者为了组装汽车还需要另外实例化发动机、底盘和轮胎，而这些汽车的组件是与调用者无关的，严重违反了迪米特法则，耦合度太高。并且非常不利于扩展。另外，本例中发动机、底盘和轮胎还是比较具体的，在实际应用中，可能这些产品的组件也都是抽象的，调用者根本不知道怎样组装产品。假如使用工厂方法的话，整个架构就显得清晰了许多。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Factory</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="n">Car</span> <span class="o">*</span><span class="p">)</span><span class="nf">makeCar</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Factory</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Car</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">makeCar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Engine</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">engine</span> <span class="o">=</span> <span class="p">[</span><span class="n">Engine</span> <span class="n">getEngine</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Underpan</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">underpan</span> <span class="o">=</span> <span class="p">[</span><span class="n">Underpan</span> <span class="n">getUnderpan</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Wheel</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">wheel</span> <span class="o">=</span> <span class="p">[</span><span class="n">Wheel</span> <span class="n">getWheel</span><span class="p">];</span>
</span><span class='line'>  <span class="n">Car</span> <span class="o">*</span><span class="n">car</span> <span class="o">=</span> <span class="p">[</span><span class="n">Car</span> <span class="nl">makeCarWithEngine</span><span class="p">:</span><span class="n">engine</span> <span class="nl">underpan</span><span class="p">:</span><span class="n">underpan</span> <span class="nl">wheel</span><span class="p">:</span><span class="n">wheel</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">car</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Client</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Car</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">mainMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Car</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">car</span> <span class="o">=</span> <span class="p">[</span><span class="n">Factory</span> <span class="n">makeCar</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">car</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p style="text-indent:20pt">  使用工厂方法后，调用端的耦合度大大降低了。并且对于工厂来说，是可以扩展的，以后如果想组装其他的汽车，只需要再增加一个工厂类的实现就可以。无论是灵活性还是稳定性都得到了极大的提高。</p>
]]></content>
  </entry>
  
</feed>
